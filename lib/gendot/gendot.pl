:- module(_, [gendot/3], [assertions, isomodes]).

:- doc(title,"Graphviz DOT generator").

:- doc(author, "Claudio Ochoa (original version)").
:- doc(author, "Jose F. Morales (improvements)").

:- doc(module,"This module generates a @tt{.dot} file (for
   @href{http://www.graphviz.org/}{Graphviz}) representing a
   graph. Nodes and edges can contain labels.").

% TODO:
%   Extend this library to support the whole DOT language
%   http://www.graphviz.org/content/dot-language

% TODO: see library(graph_to_tex)

:- use_module(library(pathnames),  [path_splitext/3]).
:- use_module(engine(stream_basic)).
:- use_module(library(format), [format/3]).

:- pred gendot(+L,+Filename,+Type) # "Generates a dot file from a list
   @var{L} representing a graph. It receives the @var{Filename}
   (without extension) of the output .dot file. Each element of
   @var{L} is a node in the graph, represented by a tuple (Identifier,
   Label, Edges), where Edges is a list of the outgoing edges of the
   current node, and each element of Edges is either an Identifier ot
   a tuple (Identifier,Label). In all cases, Labels are
   atoms. @var{Type} indicates the type of graph. If the graph is a
   Tree, then final nodes are represented by boxes. In all other
   cases, nodes are represented by circles".

gendot(L,Filename,Type):-
    % Ensure that file has .dot extension
    ( path_splitext(Filename, _, '.dot') ->
        DotFile = Filename
    ; atom_concat(Filename, '.dot', DotFile)
    ),
    % Write graph
    open(DotFile,write,Output),
    % format(Output,"digraph g{~n",[]),
    format(Output, "digraph main{~n", []),
    format(Output, "edge[arrowhead=vee] ", []),
    format(Output, "graph [rankdir=LR,ranksep=1.0];", []),
    % graph [rankdir=LR,compound=true,ranksep=1.0];
    ( Type == tree ->
        gen_tree(L,Output)
    ; gen_graph(L,Output)
    ),
    format(Output,"}~n",[]),
    close(Output).

% TODO: Implement correct escaping of IDs. From Graphviz docs:
%
%   - Any string of alphabetic ([a-zA-Z\200-\377]) characters,
%     underscores ('_') or digits ([0-9]), not beginning with a digit;
%
%   - a numeral [-]?(.[0-9]+ | [0-9]+(.[0-9]*)? );
%
%   - any double-quoted string ("...") possibly containing escaped quotes (\")1;
%
%   - an HTML string (<...>).
%
%  ``An ID is just a string; the lack of quote characters in the first
%  two forms is just for simplicity. There is no semantic difference
%  between abc_2 and "abc_2", or between 2.34 and "2.34". Obviously,
%  to use a keyword as an ID, it must be quoted.''

gen_graph([],_).
gen_graph([(Id,Label,Edges)|T],Out):-
    Shape = 'box',
    format(Out," ~w [label=\"~w\", shape=~w];~n",[Id,Label,Shape]),
    gen_edges(Edges,Id,Out),
    gen_graph(T,Out).

gen_tree([],_).
gen_tree([(Id,Label,Edges)|T],Out):-
    Shape = 'box',
    ( Edges == [] ->
        format(Out," ~w [label=\"~w\", shape=~w];~n",[Id,Label,Shape])
    ; format(Out," ~w [label=\"~w\", shape=~w];~n",[Id,Label,Shape]),
      gen_edges(Edges,Id,Out)
    ),
    gen_tree(T,Out).

gen_edges([],_,_).
gen_edges([(Link,Label)|T],Id,Out):-!,
    format(Out," ~w -> ~w [label=\"~w\"]~n",[Id,Link,Label]),
    gen_edges(T,Id,Out).
gen_edges([Link|T],Id,Out):-
    format(Out," ~w -> ~w ~n",[Id,Link]),
    gen_edges(T,Id,Out).

%% :- pred rundot(+Filename,+Ext) # "Takes a .dot file as generated by
%% gendot/2, and generates a file with extension @var{Ext} using the dot
%% command. Supported extensions include .ps, .fig, .png, .jpg,,.gif, etc
%% (see dot's user manual). This predicate needs to have dot (graphviz)
%% installed, and thus it should be used only with testing purposes, in
%% order to do no create any dependence from these external libraries".
%% 
%% rundot(Filename,Ext):-
%%      atom_concat(['dot -T',Ext,' -o ',Filename,'.',Ext,' ',Filename,'.dot'],Cmd),
%%      system(Cmd).

%test:- gendot([(1,a,[(2,z),(3,y)]),(2,b,[]),(3,c,[4]),(4,d,[])],'/tmp/test'),
%       rundot('/tmp/test','ps').
